name: CI/CD Pipeline for Next.js Deployment

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: frontend  # Name of your Docker image
      DOCKER_IMAGE_TAR: frontend.tar  # Docker image tar file name

    steps:
      ## 1. Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      ## 2. Set Up Terraform
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'  # Specify your Terraform version

      ## 3. Terraform Init
      - name: Terraform Init
        
        run: terraform init

      ## 4. Terraform Apply
      - name: Terraform Apply
        
        run: terraform apply -auto-approve
        env:
          # Replace with your cloud provider's credentials
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # Add other required environment variables for Terraform here

      ## 5. Retrieve Instance IP from Terraform Output
      - name: Get Instance IP
        
        id: get_ip
        run: |
          echo "instance_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT

      ## 6. Set IP as Environment Variable
      - name: Set IP Environment Variable
        run: echo "INSTANCE_IP=${{ steps.get_ip.outputs.ec2_public_ip }}" >> $GITHUB_ENV

      ## 7. Set Up Docker
      - name: Set Up Docker
        uses: docker/setup-buildx-action@v3

      ## 8. Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:latest ./frontend

      ## 9. Save Docker Image as Tar File
      - name: Save Docker Image
        run: |
          docker save $IMAGE_NAME:latest -o $DOCKER_IMAGE_TAR

      ## 10. Transfer Docker Image to EC2 via SCP
      - name: Transfer Docker Image to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ${{ secrets.SSH_USERNAME }}          # SSH username for your server (e.g., ubuntu)
          key: ${{ secrets.SSH_PRIVATE_KEY }}           # SSH Private Key (PEM format)
          port: 22                                       # SSH port, usually 22
          source: $DOCKER_IMAGE_TAR                      # Source file to transfer
          target: /home/${{ secrets.SSH_USERNAME }}/   # Destination path on EC2

      ## 11. Deploy Docker Image on EC2 via SSH
      - name: Deploy Docker Image on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Navigate to home directory
            cd /home/${{ secrets.SSH_USERNAME }}/

            # Load Docker image from tar
            docker load -i $DOCKER_IMAGE_TAR

            # Remove the tar file to save space
            rm $DOCKER_IMAGE_TAR

            # Stop and remove existing container if it exists
            docker stop ${IMAGE_NAME}-container || true
            docker rm ${IMAGE_NAME}-container || true

            # Run the new Docker container
            docker run -d \
              --name ${IMAGE_NAME}-container \
              -p 80:3000 \  # Adjust ports as needed
              $IMAGE_NAME:latest